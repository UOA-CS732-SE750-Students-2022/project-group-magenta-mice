#!/usr/bin/env python3

import subprocess
import sys
import os
import re
import json
from os import path

__deps = os.path.dirname(os.path.abspath(__file__)) + "/spm-deps"

if not os.path.exists(__deps):
  print("SPM install is missing dependencies. The spm-deps folder must be located next to the spm script.")
  exit(1)

if len(sys.argv) < 2:
  print("Usage: spm <command> [<args>]\nRun spm help for more information")
  exit(1)

[_, command, *args] = sys.argv

if command == "build":

  if len(args) < 1:
    print("Usage: spm build <script>")
    exit(1)

  [buildScript] = args

  with open(__deps + "/Dockerfile", "r+") as dockerfile:
    content = dockerfile.read()
    content = re.sub("^CMD .*", f"CMD {buildScript}", content, flags=re.MULTILINE)
    dockerfile.seek(0)
    dockerfile.write(content)
    dockerfile.truncate()


  subprocess.run([__deps + "/spm-build"])

if command == "run":
  __root = os.path.normpath(os.path.join(os.getcwd()))

  if len(args) < 1:
    print("Usage: spm run <executable>")
    exit(1)

  if not os.path.exists(path.join(__root, "spm.json")):
    print("spm.json is missing. Please create spm.json at the project root.")
    exit(1)

  [runScript] = args

  with open(path.join(__root, "spm.json"), "r") as spmJson:
    spm = json.load(spmJson)

    if not runScript in spm["executables"]:
      print(f"'{runScript}' is not a valid executable in spm.json")
      exit(1)

    targets = spm["executables"][runScript]

    if "tests" in targets:
      for test in targets["tests"]:
        subprocess.run([path.join(__root, "build", test)])
    if "binaries" in targets:
      for binary in targets["binaries"]:
        subprocess.run([path.join(__root, "build", binary)])

if command == "version":
  print("SPM v0.0.2")

if command == "help":
  print("Usage: spm <command> [<args>]\nRun spm help for more information")
  print("Available commands:")
  print("  build <build script>")
  print("  run   <executable>")
  print("  help")
  print("  version")
  exit(0)
