//@ts-nocheck

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

goog.exportSymbol("proto.Sim.Protocol.CancelOrderRequest", null, global);
goog.exportSymbol("proto.Sim.Protocol.ExchangeFeed", null, global);
goog.exportSymbol(
  "proto.Sim.Protocol.ExchangeFeed.InstrumentFeed",
  null,
  global
);
goog.exportSymbol(
  "proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry",
  null,
  global
);
goog.exportSymbol("proto.Sim.Protocol.InsertOrderRequest", null, global);
goog.exportSymbol(
  "proto.Sim.Protocol.InsertOrderRequest.Lifespan",
  null,
  global
);
goog.exportSymbol("proto.Sim.Protocol.InsertOrderRequest.Side", null, global);
goog.exportSymbol("proto.Sim.Protocol.LoginRequest", null, global);
goog.exportSymbol("proto.Sim.Protocol.LoginResponse", null, global);
goog.exportSymbol("proto.Sim.Protocol.LoginResponse.Instrument", null, global);
goog.exportSymbol("proto.Sim.Protocol.LogoutRequest", null, global);
goog.exportSymbol("proto.Sim.Protocol.MessageType", null, global);
goog.exportSymbol("proto.Sim.Protocol.OrderFillMessage", null, global);
goog.exportSymbol("proto.Sim.Protocol.OrderUpdateMessage", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sim.Protocol.LoginRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Sim.Protocol.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sim.Protocol.LoginRequest.displayName =
    "proto.Sim.Protocol.LoginRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sim.Protocol.LoginRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Sim.Protocol.LoginRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sim.Protocol.LoginRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sim.Protocol.LoginRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        key: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sim.Protocol.LoginRequest}
 */
proto.Sim.Protocol.LoginRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sim.Protocol.LoginRequest();
  return proto.Sim.Protocol.LoginRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sim.Protocol.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sim.Protocol.LoginRequest}
 */
proto.Sim.Protocol.LoginRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ reader.readString();
        msg.setKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sim.Protocol.LoginRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Sim.Protocol.LoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sim.Protocol.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sim.Protocol.LoginRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.Sim.Protocol.LoginRequest.prototype.getKey = function () {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.Sim.Protocol.LoginRequest.prototype.setKey = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sim.Protocol.LoginResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.Sim.Protocol.LoginResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.Sim.Protocol.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sim.Protocol.LoginResponse.displayName =
    "proto.Sim.Protocol.LoginResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Sim.Protocol.LoginResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sim.Protocol.LoginResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Sim.Protocol.LoginResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sim.Protocol.LoginResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sim.Protocol.LoginResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        instrumentsList: jspb.Message.toObjectList(
          msg.getInstrumentsList(),
          proto.Sim.Protocol.LoginResponse.Instrument.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sim.Protocol.LoginResponse}
 */
proto.Sim.Protocol.LoginResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sim.Protocol.LoginResponse();
  return proto.Sim.Protocol.LoginResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sim.Protocol.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sim.Protocol.LoginResponse}
 */
proto.Sim.Protocol.LoginResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Sim.Protocol.LoginResponse.Instrument();
        reader.readMessage(
          value,
          proto.Sim.Protocol.LoginResponse.Instrument
            .deserializeBinaryFromReader
        );
        msg.addInstruments(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sim.Protocol.LoginResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Sim.Protocol.LoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sim.Protocol.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sim.Protocol.LoginResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getInstrumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Sim.Protocol.LoginResponse.Instrument.serializeBinaryToWriter
    );
  }
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sim.Protocol.LoginResponse.Instrument = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Sim.Protocol.LoginResponse.Instrument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sim.Protocol.LoginResponse.Instrument.displayName =
    "proto.Sim.Protocol.LoginResponse.Instrument";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sim.Protocol.LoginResponse.Instrument.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Sim.Protocol.LoginResponse.Instrument.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sim.Protocol.LoginResponse.Instrument} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sim.Protocol.LoginResponse.Instrument.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, 0),
        ticker: jspb.Message.getFieldWithDefault(msg, 2, ""),
        positionlimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
        ticksizeincents: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sim.Protocol.LoginResponse.Instrument}
 */
proto.Sim.Protocol.LoginResponse.Instrument.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sim.Protocol.LoginResponse.Instrument();
  return proto.Sim.Protocol.LoginResponse.Instrument.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sim.Protocol.LoginResponse.Instrument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sim.Protocol.LoginResponse.Instrument}
 */
proto.Sim.Protocol.LoginResponse.Instrument.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */ reader.readUint32();
          msg.setId(value);
          break;
        case 2:
          var value = /** @type {string} */ reader.readString();
          msg.setTicker(value);
          break;
        case 3:
          var value = /** @type {number} */ reader.readUint32();
          msg.setPositionlimit(value);
          break;
        case 4:
          var value = /** @type {number} */ reader.readUint32();
          msg.setTicksizeincents(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sim.Protocol.LoginResponse.Instrument.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.Sim.Protocol.LoginResponse.Instrument.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sim.Protocol.LoginResponse.Instrument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sim.Protocol.LoginResponse.Instrument.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getTicker();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPositionlimit();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getTicksizeincents();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
};

/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.Sim.Protocol.LoginResponse.Instrument.prototype.getId = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};

/** @param {number} value */
proto.Sim.Protocol.LoginResponse.Instrument.prototype.setId = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string ticker = 2;
 * @return {string}
 */
proto.Sim.Protocol.LoginResponse.Instrument.prototype.getTicker = function () {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.Sim.Protocol.LoginResponse.Instrument.prototype.setTicker = function (
  value
) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional uint32 positionLimit = 3;
 * @return {number}
 */
proto.Sim.Protocol.LoginResponse.Instrument.prototype.getPositionlimit =
  function () {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 3, 0);
  };

/** @param {number} value */
proto.Sim.Protocol.LoginResponse.Instrument.prototype.setPositionlimit =
  function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
  };

/**
 * optional uint32 tickSizeInCents = 4;
 * @return {number}
 */
proto.Sim.Protocol.LoginResponse.Instrument.prototype.getTicksizeincents =
  function () {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 4, 0);
  };

/** @param {number} value */
proto.Sim.Protocol.LoginResponse.Instrument.prototype.setTicksizeincents =
  function (value) {
    jspb.Message.setProto3IntField(this, 4, value);
  };

/**
 * repeated Instrument instruments = 1;
 * @return {!Array<!proto.Sim.Protocol.LoginResponse.Instrument>}
 */
proto.Sim.Protocol.LoginResponse.prototype.getInstrumentsList = function () {
  return /** @type{!Array<!proto.Sim.Protocol.LoginResponse.Instrument>} */ jspb.Message.getRepeatedWrapperField(
    this,
    proto.Sim.Protocol.LoginResponse.Instrument,
    1
  );
};

/** @param {!Array<!proto.Sim.Protocol.LoginResponse.Instrument>} value */
proto.Sim.Protocol.LoginResponse.prototype.setInstrumentsList = function (
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.Sim.Protocol.LoginResponse.Instrument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Sim.Protocol.LoginResponse.Instrument}
 */
proto.Sim.Protocol.LoginResponse.prototype.addInstruments = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.Sim.Protocol.LoginResponse.Instrument,
    opt_index
  );
};

proto.Sim.Protocol.LoginResponse.prototype.clearInstrumentsList = function () {
  this.setInstrumentsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sim.Protocol.LogoutRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Sim.Protocol.LogoutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sim.Protocol.LogoutRequest.displayName =
    "proto.Sim.Protocol.LogoutRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sim.Protocol.LogoutRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Sim.Protocol.LogoutRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sim.Protocol.LogoutRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sim.Protocol.LogoutRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sim.Protocol.LogoutRequest}
 */
proto.Sim.Protocol.LogoutRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sim.Protocol.LogoutRequest();
  return proto.Sim.Protocol.LogoutRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sim.Protocol.LogoutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sim.Protocol.LogoutRequest}
 */
proto.Sim.Protocol.LogoutRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sim.Protocol.LogoutRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Sim.Protocol.LogoutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sim.Protocol.LogoutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sim.Protocol.LogoutRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sim.Protocol.InsertOrderRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Sim.Protocol.InsertOrderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sim.Protocol.InsertOrderRequest.displayName =
    "proto.Sim.Protocol.InsertOrderRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sim.Protocol.InsertOrderRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Sim.Protocol.InsertOrderRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sim.Protocol.InsertOrderRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sim.Protocol.InsertOrderRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        clientid: jspb.Message.getFieldWithDefault(msg, 1, 0),
        instrumentid: jspb.Message.getFieldWithDefault(msg, 2, 0),
        lifespan: jspb.Message.getFieldWithDefault(msg, 3, 0),
        side: jspb.Message.getFieldWithDefault(msg, 4, 0),
        price: jspb.Message.getFieldWithDefault(msg, 5, 0),
        volume: jspb.Message.getFieldWithDefault(msg, 6, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sim.Protocol.InsertOrderRequest}
 */
proto.Sim.Protocol.InsertOrderRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sim.Protocol.InsertOrderRequest();
  return proto.Sim.Protocol.InsertOrderRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sim.Protocol.InsertOrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sim.Protocol.InsertOrderRequest}
 */
proto.Sim.Protocol.InsertOrderRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ reader.readUint32();
        msg.setClientid(value);
        break;
      case 2:
        var value = /** @type {number} */ reader.readUint32();
        msg.setInstrumentid(value);
        break;
      case 3:
        var value =
          /** @type {!proto.Sim.Protocol.InsertOrderRequest.Lifespan} */ reader.readEnum();
        msg.setLifespan(value);
        break;
      case 4:
        var value =
          /** @type {!proto.Sim.Protocol.InsertOrderRequest.Side} */ reader.readEnum();
        msg.setSide(value);
        break;
      case 5:
        var value = /** @type {number} */ reader.readUint32();
        msg.setPrice(value);
        break;
      case 6:
        var value = /** @type {number} */ reader.readUint32();
        msg.setVolume(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sim.Protocol.InsertOrderRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Sim.Protocol.InsertOrderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sim.Protocol.InsertOrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sim.Protocol.InsertOrderRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getClientid();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getInstrumentid();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getLifespan();
  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(4, f);
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint32(5, f);
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeUint32(6, f);
  }
};

/**
 * @enum {number}
 */
proto.Sim.Protocol.InsertOrderRequest.Lifespan = {
  GFD: 0,
  FAK: 1,
};

/**
 * @enum {number}
 */
proto.Sim.Protocol.InsertOrderRequest.Side = {
  BUY: 0,
  SELL: 1,
};

/**
 * optional uint32 clientId = 1;
 * @return {number}
 */
proto.Sim.Protocol.InsertOrderRequest.prototype.getClientid = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};

/** @param {number} value */
proto.Sim.Protocol.InsertOrderRequest.prototype.setClientid = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 instrumentId = 2;
 * @return {number}
 */
proto.Sim.Protocol.InsertOrderRequest.prototype.getInstrumentid = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};

/** @param {number} value */
proto.Sim.Protocol.InsertOrderRequest.prototype.setInstrumentid = function (
  value
) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional Lifespan lifespan = 3;
 * @return {!proto.Sim.Protocol.InsertOrderRequest.Lifespan}
 */
proto.Sim.Protocol.InsertOrderRequest.prototype.getLifespan = function () {
  return /** @type {!proto.Sim.Protocol.InsertOrderRequest.Lifespan} */ jspb.Message.getFieldWithDefault(
    this,
    3,
    0
  );
};

/** @param {!proto.Sim.Protocol.InsertOrderRequest.Lifespan} value */
proto.Sim.Protocol.InsertOrderRequest.prototype.setLifespan = function (value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};

/**
 * optional Side side = 4;
 * @return {!proto.Sim.Protocol.InsertOrderRequest.Side}
 */
proto.Sim.Protocol.InsertOrderRequest.prototype.getSide = function () {
  return /** @type {!proto.Sim.Protocol.InsertOrderRequest.Side} */ jspb.Message.getFieldWithDefault(
    this,
    4,
    0
  );
};

/** @param {!proto.Sim.Protocol.InsertOrderRequest.Side} value */
proto.Sim.Protocol.InsertOrderRequest.prototype.setSide = function (value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};

/**
 * optional uint32 price = 5;
 * @return {number}
 */
proto.Sim.Protocol.InsertOrderRequest.prototype.getPrice = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 5, 0);
};

/** @param {number} value */
proto.Sim.Protocol.InsertOrderRequest.prototype.setPrice = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional uint32 volume = 6;
 * @return {number}
 */
proto.Sim.Protocol.InsertOrderRequest.prototype.getVolume = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 6, 0);
};

/** @param {number} value */
proto.Sim.Protocol.InsertOrderRequest.prototype.setVolume = function (value) {
  jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sim.Protocol.CancelOrderRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Sim.Protocol.CancelOrderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sim.Protocol.CancelOrderRequest.displayName =
    "proto.Sim.Protocol.CancelOrderRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sim.Protocol.CancelOrderRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Sim.Protocol.CancelOrderRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sim.Protocol.CancelOrderRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sim.Protocol.CancelOrderRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        clientid: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sim.Protocol.CancelOrderRequest}
 */
proto.Sim.Protocol.CancelOrderRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sim.Protocol.CancelOrderRequest();
  return proto.Sim.Protocol.CancelOrderRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sim.Protocol.CancelOrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sim.Protocol.CancelOrderRequest}
 */
proto.Sim.Protocol.CancelOrderRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ reader.readUint32();
        msg.setClientid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sim.Protocol.CancelOrderRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Sim.Protocol.CancelOrderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sim.Protocol.CancelOrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sim.Protocol.CancelOrderRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getClientid();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
};

/**
 * optional uint32 clientId = 1;
 * @return {number}
 */
proto.Sim.Protocol.CancelOrderRequest.prototype.getClientid = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};

/** @param {number} value */
proto.Sim.Protocol.CancelOrderRequest.prototype.setClientid = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sim.Protocol.OrderUpdateMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Sim.Protocol.OrderUpdateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sim.Protocol.OrderUpdateMessage.displayName =
    "proto.Sim.Protocol.OrderUpdateMessage";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sim.Protocol.OrderUpdateMessage.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Sim.Protocol.OrderUpdateMessage.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sim.Protocol.OrderUpdateMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sim.Protocol.OrderUpdateMessage.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        clientid: jspb.Message.getFieldWithDefault(msg, 1, 0),
        instrumentid: jspb.Message.getFieldWithDefault(msg, 2, 0),
        volumeremaining: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sim.Protocol.OrderUpdateMessage}
 */
proto.Sim.Protocol.OrderUpdateMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sim.Protocol.OrderUpdateMessage();
  return proto.Sim.Protocol.OrderUpdateMessage.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sim.Protocol.OrderUpdateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sim.Protocol.OrderUpdateMessage}
 */
proto.Sim.Protocol.OrderUpdateMessage.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ reader.readUint32();
        msg.setClientid(value);
        break;
      case 2:
        var value = /** @type {number} */ reader.readUint32();
        msg.setInstrumentid(value);
        break;
      case 3:
        var value = /** @type {number} */ reader.readUint32();
        msg.setVolumeremaining(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sim.Protocol.OrderUpdateMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Sim.Protocol.OrderUpdateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sim.Protocol.OrderUpdateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sim.Protocol.OrderUpdateMessage.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getClientid();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getInstrumentid();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getVolumeremaining();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
};

/**
 * optional uint32 clientId = 1;
 * @return {number}
 */
proto.Sim.Protocol.OrderUpdateMessage.prototype.getClientid = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};

/** @param {number} value */
proto.Sim.Protocol.OrderUpdateMessage.prototype.setClientid = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 instrumentId = 2;
 * @return {number}
 */
proto.Sim.Protocol.OrderUpdateMessage.prototype.getInstrumentid = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};

/** @param {number} value */
proto.Sim.Protocol.OrderUpdateMessage.prototype.setInstrumentid = function (
  value
) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint32 volumeRemaining = 3;
 * @return {number}
 */
proto.Sim.Protocol.OrderUpdateMessage.prototype.getVolumeremaining =
  function () {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 3, 0);
  };

/** @param {number} value */
proto.Sim.Protocol.OrderUpdateMessage.prototype.setVolumeremaining = function (
  value
) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sim.Protocol.OrderFillMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Sim.Protocol.OrderFillMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sim.Protocol.OrderFillMessage.displayName =
    "proto.Sim.Protocol.OrderFillMessage";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sim.Protocol.OrderFillMessage.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Sim.Protocol.OrderFillMessage.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sim.Protocol.OrderFillMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sim.Protocol.OrderFillMessage.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        clientid: jspb.Message.getFieldWithDefault(msg, 1, 0),
        instrumentid: jspb.Message.getFieldWithDefault(msg, 2, 0),
        price: jspb.Message.getFieldWithDefault(msg, 3, 0),
        volumefilled: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sim.Protocol.OrderFillMessage}
 */
proto.Sim.Protocol.OrderFillMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sim.Protocol.OrderFillMessage();
  return proto.Sim.Protocol.OrderFillMessage.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sim.Protocol.OrderFillMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sim.Protocol.OrderFillMessage}
 */
proto.Sim.Protocol.OrderFillMessage.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ reader.readUint32();
        msg.setClientid(value);
        break;
      case 2:
        var value = /** @type {number} */ reader.readUint32();
        msg.setInstrumentid(value);
        break;
      case 3:
        var value = /** @type {number} */ reader.readUint32();
        msg.setPrice(value);
        break;
      case 4:
        var value = /** @type {number} */ reader.readUint32();
        msg.setVolumefilled(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sim.Protocol.OrderFillMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Sim.Protocol.OrderFillMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sim.Protocol.OrderFillMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sim.Protocol.OrderFillMessage.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getClientid();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getInstrumentid();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getVolumefilled();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
};

/**
 * optional uint32 clientId = 1;
 * @return {number}
 */
proto.Sim.Protocol.OrderFillMessage.prototype.getClientid = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};

/** @param {number} value */
proto.Sim.Protocol.OrderFillMessage.prototype.setClientid = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 instrumentId = 2;
 * @return {number}
 */
proto.Sim.Protocol.OrderFillMessage.prototype.getInstrumentid = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};

/** @param {number} value */
proto.Sim.Protocol.OrderFillMessage.prototype.setInstrumentid = function (
  value
) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint32 price = 3;
 * @return {number}
 */
proto.Sim.Protocol.OrderFillMessage.prototype.getPrice = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 3, 0);
};

/** @param {number} value */
proto.Sim.Protocol.OrderFillMessage.prototype.setPrice = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint32 volumeFilled = 4;
 * @return {number}
 */
proto.Sim.Protocol.OrderFillMessage.prototype.getVolumefilled = function () {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 4, 0);
};

/** @param {number} value */
proto.Sim.Protocol.OrderFillMessage.prototype.setVolumefilled = function (
  value
) {
  jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sim.Protocol.ExchangeFeed = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.Sim.Protocol.ExchangeFeed.repeatedFields_,
    null
  );
};
goog.inherits(proto.Sim.Protocol.ExchangeFeed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sim.Protocol.ExchangeFeed.displayName =
    "proto.Sim.Protocol.ExchangeFeed";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Sim.Protocol.ExchangeFeed.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sim.Protocol.ExchangeFeed.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Sim.Protocol.ExchangeFeed.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sim.Protocol.ExchangeFeed} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sim.Protocol.ExchangeFeed.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        instrumentfeedsList: jspb.Message.toObjectList(
          msg.getInstrumentfeedsList(),
          proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sim.Protocol.ExchangeFeed}
 */
proto.Sim.Protocol.ExchangeFeed.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sim.Protocol.ExchangeFeed();
  return proto.Sim.Protocol.ExchangeFeed.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sim.Protocol.ExchangeFeed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sim.Protocol.ExchangeFeed}
 */
proto.Sim.Protocol.ExchangeFeed.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Sim.Protocol.ExchangeFeed.InstrumentFeed();
        reader.readMessage(
          value,
          proto.Sim.Protocol.ExchangeFeed.InstrumentFeed
            .deserializeBinaryFromReader
        );
        msg.addInstrumentfeeds(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sim.Protocol.ExchangeFeed.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Sim.Protocol.ExchangeFeed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sim.Protocol.ExchangeFeed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sim.Protocol.ExchangeFeed.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getInstrumentfeedsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.serializeBinaryToWriter
    );
  }
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.repeatedFields_,
    null
  );
};
goog.inherits(proto.Sim.Protocol.ExchangeFeed.InstrumentFeed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.displayName =
    "proto.Sim.Protocol.ExchangeFeed.InstrumentFeed";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.repeatedFields_ = [2, 3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        instrumentid: jspb.Message.getFieldWithDefault(msg, 1, 0),
        bidsList: jspb.Message.toObjectList(
          msg.getBidsList(),
          proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.toObject,
          includeInstance
        ),
        asksList: jspb.Message.toObjectList(
          msg.getAsksList(),
          proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sim.Protocol.ExchangeFeed.InstrumentFeed();
  return proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */ reader.readUint32();
          msg.setInstrumentid(value);
          break;
        case 2:
          var value =
            new proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry();
          reader.readMessage(
            value,
            proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry
              .deserializeBinaryFromReader
          );
          msg.addBids(value);
          break;
        case 3:
          var value =
            new proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry();
          reader.readMessage(
            value,
            proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry
              .deserializeBinaryFromReader
          );
          msg.addAsks(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getInstrumentid();
    if (f !== 0) {
      writer.writeUint32(1, f);
    }
    f = message.getBidsList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        2,
        f,
        proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry
          .serializeBinaryToWriter
      );
    }
    f = message.getAsksList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        3,
        f,
        proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry
          .serializeBinaryToWriter
      );
    }
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.displayName =
    "proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.prototype.toObject =
    function (opt_includeInstance) {
      return proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.toObject(
        opt_includeInstance,
        this
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        price: jspb.Message.getFieldWithDefault(msg, 1, 0),
        volume: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry();
    return proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.deserializeBinaryFromReader(
      msg,
      reader
    );
  };

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */ reader.readUint32();
          msg.setPrice(value);
          break;
        case 2:
          var value = /** @type {number} */ reader.readUint32();
          msg.setVolume(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.serializeBinaryToWriter(
      this,
      writer
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getPrice();
    if (f !== 0) {
      writer.writeUint32(1, f);
    }
    f = message.getVolume();
    if (f !== 0) {
      writer.writeUint32(2, f);
    }
  };

/**
 * optional uint32 price = 1;
 * @return {number}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.prototype.getPrice =
  function () {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
  };

/** @param {number} value */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.prototype.setPrice =
  function (value) {
    jspb.Message.setProto3IntField(this, 1, value);
  };

/**
 * optional uint32 volume = 2;
 * @return {number}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.prototype.getVolume =
  function () {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
  };

/** @param {number} value */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry.prototype.setVolume =
  function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
  };

/**
 * optional uint32 instrumentId = 1;
 * @return {number}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.getInstrumentid =
  function () {
    return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
  };

/** @param {number} value */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.setInstrumentid =
  function (value) {
    jspb.Message.setProto3IntField(this, 1, value);
  };

/**
 * repeated bookEntry bids = 2;
 * @return {!Array<!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry>}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.getBidsList =
  function () {
    return /** @type{!Array<!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry>} */ jspb.Message.getRepeatedWrapperField(
      this,
      proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry,
      2
    );
  };

/** @param {!Array<!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry>} value */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.setBidsList =
  function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
  };

/**
 * @param {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.addBids = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry,
    opt_index
  );
};

proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.clearBidsList =
  function () {
    this.setBidsList([]);
  };

/**
 * repeated bookEntry asks = 3;
 * @return {!Array<!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry>}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.getAsksList =
  function () {
    return /** @type{!Array<!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry>} */ jspb.Message.getRepeatedWrapperField(
      this,
      proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry,
      3
    );
  };

/** @param {!Array<!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry>} value */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.setAsksList =
  function (value) {
    jspb.Message.setRepeatedWrapperField(this, 3, value);
  };

/**
 * @param {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry}
 */
proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.addAsks = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.bookEntry,
    opt_index
  );
};

proto.Sim.Protocol.ExchangeFeed.InstrumentFeed.prototype.clearAsksList =
  function () {
    this.setAsksList([]);
  };

/**
 * repeated InstrumentFeed instrumentFeeds = 1;
 * @return {!Array<!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed>}
 */
proto.Sim.Protocol.ExchangeFeed.prototype.getInstrumentfeedsList = function () {
  return /** @type{!Array<!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed>} */ jspb.Message.getRepeatedWrapperField(
    this,
    proto.Sim.Protocol.ExchangeFeed.InstrumentFeed,
    1
  );
};

/** @param {!Array<!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed>} value */
proto.Sim.Protocol.ExchangeFeed.prototype.setInstrumentfeedsList = function (
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Sim.Protocol.ExchangeFeed.InstrumentFeed}
 */
proto.Sim.Protocol.ExchangeFeed.prototype.addInstrumentfeeds = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.Sim.Protocol.ExchangeFeed.InstrumentFeed,
    opt_index
  );
};

proto.Sim.Protocol.ExchangeFeed.prototype.clearInstrumentfeedsList =
  function () {
    this.setInstrumentfeedsList([]);
  };

/**
 * @enum {number}
 */
proto.Sim.Protocol.MessageType = {
  LOGIN: 0,
  LOGOUT: 1,
  LOGIN_RESPONSE: 2,
  LOGOUT_RESPONSE: 3,
  INSERT_ORDER: 11,
  CANCEL_ORDER: 12,
  AMEND_ORDER: 13,
  ORDER_UPDATE: 21,
  ORDER_FILL: 22,
  EXCHANGE_FEED: 31,
};

goog.object.extend(exports, proto.Sim.Protocol);
