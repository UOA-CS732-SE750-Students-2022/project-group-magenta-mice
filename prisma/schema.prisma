// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id
  name            String
  profilePicUrl   String
  email           String           @default("")
  userPermissions UserPermission[]
  invites         Invite[]

  Trade Trade[]
}

model Exchange {
  id String @id @default(uuid())

  public          Boolean          @default(false)
  userPermissions UserPermission[]
  invites         Invite[]

  instruments Instrument[]

  name   String
  colour Int
  Trade  Trade[]
}

model Invite {
  id         String   @id @default(uuid())
  exchangeId String
  exchange   Exchange @relation(fields: [exchangeId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, exchangeId], name: "key")
}

model UserPermission {
  id         String         @id @default(uuid())
  apiKey     String         @default("")
  exchangeId String
  exchange   Exchange       @relation(fields: [exchangeId], references: [id], onDelete: Cascade)
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  permission PermissionType
}

enum PermissionType {
  ADMIN
  USER
}

model Instrument {
  id                String         @id @default(uuid())
  exchangeId        String
  name              String
  tickSizeMin       Int
  positionLimit     Int
  exchange          Exchange       @relation(fields: [exchangeId], references: [id], onDelete: Cascade)
  instrumentType    InstrumentType
  bondFixedPrice    Int?
  bondVolatility    Int?
  stockInitialPrice Int?
  stockVolatility   Int?

  Trade Trade[]
}

enum InstrumentType {
  BOND
  STOCK
}

model Trade {
  id Int @id @default(autoincrement())

  exchange   Exchange @relation(fields: [exchangeId], references: [id], onDelete: Cascade)
  exchangeId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  instrumentId String

  price  Int
  volume Int
  side   Side
}

enum Side {
  BID
  ASK
}
